<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.FeedMapper">

    <select id="getFeeds" resultMap="feedDtoMap">
        select *
        from feeds
    </select>

    <select id="getFeedsByAliases" resultMap="feedDtoMap">
        select *
        from feeds
        where (#{aliases, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler})::text[] @> ('{}'::text[] || alias)
    </select>

    <insert id="insertFeedData" useGeneratedKeys="false">
        insert into feed_data (event_id, feed_id, version, name, proper_name, type, severity_id, description, started_at, ended_at,
                               updated_at, observations, episodes, enriched, geometries, urls, location)
        values (#{eventId}, #{feedId}, #{version}, #{name}, #{properName}, #{type},
                (select severity_id from severities where severity = #{severity}),
                #{description}, #{startedAt}, #{endedAt},
                #{updatedAt}, #{observations, typeHandler=io.kontur.eventapi.typehandler.UUIDArrayTypeHandler},
                #{episodes}::jsonb, #{enriched},
                <choose>
                    <when test="geomFuncType != null &amp;&amp; geomFuncType == 1">
                        collectcyclonegeometries(#{episodes}::jsonb),
                    </when>
                    <otherwise>
                        collectEventGeometries(#{episodes}::jsonb),
                    </otherwise>
                </choose>
                #{urls, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler}, #{location})
    </insert>

    <update id="markOutdatedEventsVersions">
    <![CDATA[
        update feed_data set is_latest_version = false
        where event_id = #{eventId}
          and feed_id = #{feedId}
          and version < #{version}
          and is_latest_version is true
    ]]>
    </update>

    <select id="searchForEvents" resultMap="feedDataDtoMap">
        with events as (
            select
                box2d(fd.collected_geometry) as bbox,
                st_pointonsurface(fd.collected_geometry) as centroid,
                fd.event_id, fd.feed_id, fd.version, fd.name, fd.proper_name, fd.type, sv.severity, fd.description,
                fd.started_at, fd.ended_at, fd.updated_at, fd.observations, fd.geometries, fd.event_details, fd.urls,
                fd.location,
                <choose>
                    <when test='"LATEST".equalsIgnoreCase(episodeFilterType)'>
                        jsonb_build_array((
                            select episode from jsonb_array_elements(fd.episodes) episode
                            order by (episode ->> 'updatedAt')::timestamptz desc
                            limit 1
                        )) as episodes
                    </when>
                    <when test='"NONE".equalsIgnoreCase(episodeFilterType)'>
                        '[]'::jsonb as episodes
                    </when>
                    <otherwise>
                        fd.episodes
                    </otherwise>
                </choose>
            from feed_data fd
                left join severities sv on fd.severity_id = sv.severity_id
            where fd.feed_id = ( select feed_id from feeds where alias = #{feedAlias} )
                and fd.is_latest_version
                and fd.enriched
                <if test="eventTypes!=null &amp;&amp; !eventTypes.isEmpty" >
                    <foreach item="eventType" collection="eventTypes" separator="," open="and fd.type in (" close=")">
                        #{eventType}::text
                    </foreach>
                </if>
                <if test="severities!=null &amp;&amp; !severities.isEmpty"  >
                    <foreach item="severity" collection="severities" separator="," open="and fd.severity_id &gt;= (select min(severity_id) from severities where severity in (" close="))">
                        #{severity}::text
                    </foreach>
                    <foreach item="severity" collection="severities" separator="," open="and fd.severity_id &lt;= (select max(severity_id) from severities where severity in (" close="))">
                        #{severity}::text
                    </foreach>
                </if>
                <if test='from != null'>
                    <![CDATA[
                    and (fd.ended_at >= #{from})
                    ]]>
                </if>
                <if test='to != null'>
                    <![CDATA[
                    and (fd.started_at <= #{to})
                    ]]>
                </if>
                <if test='updatedAfter != null'>
                    <if test='"ASC".equalsIgnoreCase(sortOrder)'>
                        and fd.updated_at > #{updatedAfter}
                    </if>
                    <if test='"DESC".equalsIgnoreCase(sortOrder)'>
                        and fd.updated_at &lt; #{updatedAfter}
                    </if>
                </if>
                <if test="xMin!=null &amp;&amp; yMin!=null &amp;&amp; xMax!=null &amp;&amp; yMax!=null">
                    and ST_MakeEnvelope(#{xMin}, #{yMin}, #{xMax}, #{yMax}, 4326) &amp;&amp; fd.collected_geometry
                </if>
            order by fd.updated_at ${sortOrder}
            limit #{limit}
        )
        select  event_id, feed_id, version, name, proper_name, type, severity, description, started_at, ended_at,
                updated_at, observations, geometries, event_details, urls, location, episodes,
                ARRAY[st_xmin(bbox), st_ymin(bbox), st_xmax(bbox),st_ymax(bbox)] as bbox,
                ARRAY[st_x(centroid), st_y(centroid)] as centroid
        from events
    </select>

    <select id="searchForEventDtos" resultMap="eventDtoMap">
        with events as (
        select
        box2d(fd.collected_geometry) as bbox,
        st_pointonsurface(fd.collected_geometry) as centroid,
        fd.event_id, fd.feed_id, fd.version, fd.name, fd.proper_name, fd.type, sv.severity, fd.description,
        fd.started_at, fd.ended_at, fd.updated_at, fd.observations, fd.geometries, fd.event_details, fd.urls,
        fd.location,
        <choose>
            <when test='"LATEST".equalsIgnoreCase(episodeFilterType)'>
                jsonb_build_array((
                select episode from jsonb_array_elements(fd.episodes) episode
                order by (episode ->> 'updatedAt')::timestamptz desc
                limit 1
                )) as episodes
            </when>
            <when test='"NONE".equalsIgnoreCase(episodeFilterType)'>
                '[]'::jsonb as episodes
            </when>
            <otherwise>
                fd.episodes
            </otherwise>
        </choose>
        from feed_data fd
        left join severities sv on fd.severity_id = sv.severity_id
        where fd.feed_id = ( select feed_id from feeds where alias = #{feedAlias} )
        and fd.is_latest_version
        and fd.enriched
        <if test="eventTypes!=null &amp;&amp; !eventTypes.isEmpty" >
            <foreach item="eventType" collection="eventTypes" separator="," open="and fd.type in (" close=")">
                #{eventType}::text
            </foreach>
        </if>
        <if test="severities!=null &amp;&amp; !severities.isEmpty"  >
            <foreach item="severity" collection="severities" separator="," open="and fd.severity_id &gt;= (select min(severity_id) from severities where severity in (" close="))">
                #{severity}::text
            </foreach>
            <foreach item="severity" collection="severities" separator="," open="and fd.severity_id &lt;= (select max(severity_id) from severities where severity in (" close="))">
                #{severity}::text
            </foreach>
        </if>
        <if test='from != null'>
            <![CDATA[
                    and (fd.ended_at >= #{from})
                    ]]>
        </if>
        <if test='to != null'>
            <![CDATA[
                    and (fd.started_at <= #{to})
                    ]]>
        </if>
        <if test='updatedAfter != null'>
            <if test='"ASC".equalsIgnoreCase(sortOrder)'>
                and fd.updated_at > #{updatedAfter}
            </if>
            <if test='"DESC".equalsIgnoreCase(sortOrder)'>
                and fd.updated_at &lt; #{updatedAfter}
            </if>
        </if>
        <if test="xMin!=null &amp;&amp; yMin!=null &amp;&amp; xMax!=null &amp;&amp; yMax!=null">
            and ST_MakeEnvelope(#{xMin}, #{yMin}, #{xMax}, #{yMax}, 4326) &amp;&amp; fd.collected_geometry
        </if>
        order by fd.updated_at ${sortOrder}
        limit #{limit}
        )
        select  event_id, version, name, proper_name, type, severity, description, started_at, ended_at,
        updated_at, observations, geometries, event_details, urls, location, episodes,
        ARRAY[st_xmin(bbox), st_ymin(bbox), st_xmax(bbox),st_ymax(bbox)] as bbox,
        ARRAY[st_x(centroid), st_y(centroid)] as centroid
        from events
    </select>

    <select id="getEventByEventIdAndByVersionOrLast" resultMap="feedDataDtoMap">
        with event as (
            select
                box2d(fd.collected_geometry) as bbox,
                st_pointonsurface(fd.collected_geometry) as centroid,
                fd.event_id, fd.feed_id, fd.version, fd.name, fd.proper_name, fd.type, sv.severity, fd.description,
                fd.started_at, fd.ended_at, fd.updated_at, fd.observations, fd.geometries, fd.event_details, fd.urls,
                fd.location,
                <choose>
                    <when test='"LATEST".equalsIgnoreCase(episodeFilterType)'>
                        jsonb_build_array((
                            select episode from jsonb_array_elements(fd.episodes) episode
                            order by (episode ->> 'updatedAt')::timestamptz desc
                            limit 1
                        )) as episodes
                    </when>
                    <when test='"NONE".equalsIgnoreCase(episodeFilterType)'>
                        '[]'::jsonb as episodes
                    </when>
                    <otherwise>
                        fd.episodes
                    </otherwise>
                </choose>
            FROM feed_data fd
                left join severities sv on fd.severity_id = sv.severity_id
            WHERE fd.event_id = #{eventId}
              AND fd.feed_id = ( select feed_id from feeds where alias = #{feedAlias} )
            <choose>
                <when test="version != null">
                    AND fd.version = #{version}
                </when>
                <otherwise>
                    AND fd.is_latest_version
                </otherwise>
            </choose>
        )
        select  event_id, feed_id, version, name, proper_name, type, severity, description, started_at, ended_at,
                updated_at, observations, geometries, event_details, urls, location, episodes,
                ARRAY[st_xmin(bbox), st_ymin(bbox), st_xmax(bbox),st_ymax(bbox)] as bbox,
                ARRAY[st_x(centroid), st_y(centroid)] as centroid
        from event
    </select>

    <select id="getEventDtoByEventIdAndByVersionOrLast" resultMap="eventDtoMap">
        with event as (
        select
        box2d(fd.collected_geometry) as bbox,
        st_pointonsurface(fd.collected_geometry) as centroid,
        fd.event_id, fd.feed_id, fd.version, fd.name, fd.proper_name, fd.type, sv.severity, fd.description,
        fd.started_at, fd.ended_at, fd.updated_at, fd.observations, fd.geometries, fd.event_details, fd.urls,
        fd.location,
        <choose>
            <when test='"LATEST".equalsIgnoreCase(episodeFilterType)'>
                jsonb_build_array((
                select episode from jsonb_array_elements(fd.episodes) episode
                order by (episode ->> 'updatedAt')::timestamptz desc
                limit 1
                )) as episodes
            </when>
            <when test='"NONE".equalsIgnoreCase(episodeFilterType)'>
                '[]'::jsonb as episodes
            </when>
            <otherwise>
                fd.episodes
            </otherwise>
        </choose>
        FROM feed_data fd
        left join severities sv on fd.severity_id = sv.severity_id
        WHERE fd.event_id = #{eventId}
        AND fd.feed_id = ( select feed_id from feeds where alias = #{feedAlias} )
        <choose>
            <when test="version != null">
                AND fd.version = #{version}
            </when>
            <otherwise>
                AND fd.is_latest_version
            </otherwise>
        </choose>
        )
        select  event_id, version, name, proper_name, type, severity, description, started_at, ended_at,
        updated_at, observations, geometries, event_details, urls, location, episodes,
        ARRAY[st_xmin(bbox), st_ymin(bbox), st_xmax(bbox),st_ymax(bbox)] as bbox,
        ARRAY[st_x(centroid), st_y(centroid)] as centroid
        from event
    </select>

    <select id="getLastFeedDataVersion" resultType="java.lang.Long">
        SELECT max(version)
        FROM feed_data
        WHERE event_id = #{eventId}
            AND feed_id = #{feedId}
    </select>

    <select id="getNotEnrichedEventsForFeed" resultMap="feedDataDtoMap">
        SELECT event_id, feed_id, version, updated_at, name,
               enriched, enrichment_attempts, event_details, geometries, episodes, enrichment_skipped
        FROM feed_data
        WHERE feed_id = #{feedId} AND NOT enriched
        ORDER BY enrichment_attempts ASC NULLS FIRST, updated_at ASC
        LIMIT 1000
    </select>

    <select id="getEnrichmentSkippedEventsForFeed" resultMap="feedDataDtoMap">
        SELECT event_id, feed_id, version, updated_at, name,
               enriched, enrichment_attempts, event_details, geometries, episodes, enrichment_skipped
        FROM feed_data
        WHERE feed_id = #{feedId} AND enrichment_skipped
              AND (enrichment_attempts &lt; 5 or enriched_at &lt; now() - '24 hour'::interval)
        ORDER BY enrichment_attempts, updated_at
        LIMIT 10
    </select>

    <select id="getNotEnrichedEventsCount" resultType="java.lang.Integer">
        SELECT count(*) FROM feed_data WHERE NOT enriched;
    </select>

    <select id="getEnrichmentSkippedEventsCount" resultType="java.lang.Integer">
        SELECT count(*) FROM feed_data WHERE enrichment_skipped;
    </select>

    <update id="addAnalytics">
        UPDATE feed_data
        SET
            <if test='eventDetails != null'>
                event_details = #{eventDetails}::jsonb,
            </if>
            enriched_at = current_timestamp,
            enriched = #{enriched},
            episodes = #{episodes}::jsonb,
            name = #{name},
            enrichment_attempts = #{enrichmentAttempts},
            enrichment_skipped = #{enrichmentSkipped}
        WHERE feed_id = #{feedId} AND event_id = #{eventId} AND version = #{version}
    </update>

    <insert id="createFeed">
        insert into feeds (feed_id, alias, name, providers)
        values (#{feedId}, #{alias}, #{name}, #{providers, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler})
    </insert>

    <resultMap id="feedDtoMap" type="io.kontur.eventapi.entity.Feed">
        <result property="feedId" column="feed_id" />
        <result property="description" column="description"/>
        <result property="alias" column="alias"/>
        <result property="providers" column="providers" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="roles" column="roles" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="enrichment" column="enrichment" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="enrichmentRequest" column="enrichment_request"/>
        <result property="enrichmentPostProcessors" column="enrichment_postprocessors" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
    </resultMap>

    <resultMap id="feedDataDtoMap" type="io.kontur.eventapi.entity.FeedData">
        <result property="eventId" column="event_id" />
        <result property="feedId" column="feed_id" />
        <result property="version" column="version" />
        <result property="name" column="name" />
        <result property="type" column="type" />
        <result property="properName" column="proper_name"/>
        <result property="description" column="description" />
        <result property="startedAt" column="started_at" />
        <result property="endedAt" column="ended_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="observations" column="observations" typeHandler="io.kontur.eventapi.typehandler.UUIDArrayTypeHandler" />
        <result property="episodes" column="episodes" typeHandler="io.kontur.eventapi.typehandler.FeedEpisodeTypeHandler"/>
        <result property="geometries" column="geometries" typeHandler="io.kontur.eventapi.typehandler.FeatureCollectionTypeHandler"/>
        <result property="eventDetails" column="event_details" typeHandler="io.kontur.eventapi.typehandler.MapTypeHandler"/>
        <result property="enriched" column="enriched"/>
        <result property="enrichmentAttempts" column="enrichment_attempts" />
        <result property="enrichmentSkipped" column="enrichment_skipped" />
        <result property="urls" column="urls" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler" />
        <result property="location" column="location"/>
        <result property="composedAt" column="composed_at"/>
        <result property="enrichedAt" column="enriched_at"/>
        <result property="severity" column="severity" />
        <result property="bbox" column="bbox" typeHandler="io.kontur.eventapi.typehandler.DoubleArrayTypeHandler"/>
        <result property="centroid" column="centroid" typeHandler="io.kontur.eventapi.typehandler.DoubleArrayTypeHandler"/>
    </resultMap>

    <resultMap id="eventDtoMap" type="io.kontur.eventapi.resource.dto.EventDto">
        <result property="eventId" column="event_id" />
        <result property="version" column="version" />
        <result property="name" column="name" />
        <result property="type" column="type" />
        <result property="properName" column="proper_name"/>
        <result property="description" column="description" />
        <result property="startedAt" column="started_at" />
        <result property="endedAt" column="ended_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="observations" column="observations" typeHandler="io.kontur.eventapi.typehandler.UUIDArrayTypeHandler" />
        <result property="episodes" column="episodes" typeHandler="io.kontur.eventapi.typehandler.EventEpisodeTypeHandler"/>
        <result property="geometries" column="geometries" typeHandler="io.kontur.eventapi.typehandler.FeatureCollectionTypeHandler"/>
        <result property="eventDetails" column="event_details" typeHandler="io.kontur.eventapi.typehandler.MapTypeHandler"/>
        <result property="urls" column="urls" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler" />
        <result property="location" column="location"/>
        <result property="severity" column="severity" />
        <result property="bbox" column="bbox" typeHandler="io.kontur.eventapi.typehandler.DoubleArrayTypeHandler"/>
        <result property="centroid" column="centroid" typeHandler="io.kontur.eventapi.typehandler.DoubleArrayTypeHandler"/>
    </resultMap>
</mapper>