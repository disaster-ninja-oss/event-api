<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.FeedMapper">

    <select id="getFeeds" resultMap="feedDtoMap">
        select *
        from feeds
    </select>

    <insert id="insertFeedData" useGeneratedKeys="false">
        insert into feed_data (event_id, feed_id, version, name, description, started_at, ended_at, updated_at, observations, episodes)
        values (#{eventId}, #{feedId}, #{version}, #{name}, #{description}, #{startedAt}, #{endedAt}, #{updatedAt},
                #{observations, typeHandler=io.kontur.eventapi.typehandler.UUIDArrayTypeHandler}, #{episodes}::jsonb)
    </insert>

    <select id="searchForEvents" resultMap="feedDataDtoMap">
        WITH feed as (SELECT feed_id
                      FROM feeds
                      WHERE alias = #{feedAlias}),
            feed_version as (SELECT event_id, max(version) as version
                             FROM feed_data fd2,
                                 feed f
                             WHERE fd2.feed_id = f.feed_id
                             GROUP BY event_id),
            type_match as (select distinct tm.event_id, tm.version
                           from feed_data tm,
                                <if test="(eventTypes!=null &amp;&amp; !eventTypes.isEmpty()) || (severities!=null &amp;&amp; !severities.isEmpty())"  >
                                    jsonb_array_elements(episodes) arr(episode),
                                </if>
                               feed_version
                           where feed_version.event_id = tm.event_id
                             and feed_version.version = tm.version
                             <foreach item="eventType" collection="eventTypes" separator="," open="and episode ->> 'type' in (" close=")">
                                 #{eventType}
                             </foreach>
                             <foreach item="severity" collection="severities" separator="," open="and episode ->> 'severity' in (" close=")">
                                 #{severity}
                             </foreach>
                )
        SELECT fd.*
        FROM feed_data fd,
            feed f,
            type_match
        WHERE fd.feed_id = f.feed_id
          AND fd.event_id = type_match.event_id
          AND fd.version = type_match.version
          <if test='after != null'>
              AND fd.updated_at > #{after}
          </if>
        ORDER BY fd.updated_at ${sortOrder}
        LIMIT #{limit};
    </select>

    <select id="getLastEventById" resultMap="feedDataDtoMap">
        WITH feed as (SELECT feed_id
                      FROM feeds
                      WHERE alias = #{feedAlias})
        SELECT fd.*
        FROM feed_data fd,
             feed f
        WHERE fd.event_id = #{eventId}
          AND f.feed_id = fd.feed_id
        ORDER BY version DESC
        LIMIT 1
    </select>

    <resultMap id="feedDtoMap" type="io.kontur.eventapi.entity.Feed">
        <result property="feedId" column="feed_id" />
        <result property="description" column="description"/>
        <result property="alias" column="alias"/>
        <result property="providers" column="providers" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="roles" column="roles" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
    </resultMap>

    <resultMap id="feedDataDtoMap" type="io.kontur.eventapi.entity.FeedData">
        <result property="eventId" column="event_id" />
        <result property="feedId" column="feed_id" />
        <result property="version" column="version" />
        <result property="name" column="name" />
        <result property="description" column="description" />
        <result property="startedAt" column="started_at" />
        <result property="endedAt" column="ended_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="observations" column="observations" typeHandler="io.kontur.eventapi.typehandler.UUIDArrayTypeHandler" />
        <result property="episodes" column="episodes" typeHandler="io.kontur.eventapi.typehandler.FeedEpisodeTypeHandler"/>
    </resultMap>
</mapper>