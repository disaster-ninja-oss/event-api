<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.FeedMapper">

    <select id="getFeeds" resultMap="feedDtoMap">
        select *
        from feeds
    </select>

    <insert id="insertFeedData" useGeneratedKeys="false">
        insert into feed_data (event_id, feed_id, version, name, description, started_at, ended_at, updated_at, observations, episodes)
        values (#{eventId}, #{feedId}, #{version}, #{name}, #{description}, #{startedAt}, #{endedAt}, #{updatedAt},
                #{observations, typeHandler=io.kontur.eventapi.typehandler.UUIDArrayTypeHandler}, #{episodes}::jsonb)
    </insert>

    <select id="searchForEvents" resultMap="feedDataDtoMap">
        <![CDATA[
        select *
        from feed_data fd
        where fd.feed_id = ( select feed_id from feeds where alias = #{feedAlias} )
            and not exists (select from feed_data prev where fd.feed_id = prev.feed_id and fd.event_id = prev.event_id and fd.version < prev.version)
        ]]>
            <if test="(eventTypes!=null &amp;&amp; !eventTypes.isEmpty()) || (severities!=null &amp;&amp; !severities.isEmpty())"  >
                and exists(select from jsonb_array_elements(episodes) arr(episode) where 1=1
                <foreach item="eventType" collection="eventTypes" separator="," open="and episode ->> 'type' in (" close=")">
                    #{eventType}
                </foreach>
                <foreach item="severity" collection="severities" separator="," open="and episode ->> 'severity' in (" close=")">
                   #{severity}
                </foreach>
                )
            </if>
            <if test='from != null'>
                <![CDATA[
                and (fd.ended_at >= #{from})
                ]]>
            </if>
            <if test='to != null'>
                <![CDATA[
                and (fd.started_at <= #{to})
                ]]>
            </if>
            <if test='updatedAfter != null'>
                and fd.updated_at >= #{updatedAfter}
            </if>
            <if test="xMin!=null &amp;&amp; yMin!=null &amp;&amp; xMax!=null &amp;&amp; yMax!=null">
                and ST_Intersects(ST_MakeEnvelope(#{xMin}, #{yMin}, #{xMax}, #{yMax}, 4326), fd.collected_geometry)
            </if>
        order by fd.updated_at ${sortOrder}
        limit #{limit};
    </select>

    <select id="getEventByEventIdAndByVersionOrLast" resultMap="feedDataDtoMap">
        WITH feed as (SELECT feed_id
                      FROM feeds
                      WHERE alias = #{feedAlias})
        SELECT fd.*
        FROM feed_data fd,
             feed f
        WHERE fd.event_id = #{eventId}
          AND f.feed_id = fd.feed_id
        <choose>
            <when test="version != null">
                AND fd.version = #{version}
            </when>
            <otherwise>
                ORDER BY version DESC
                LIMIT 1
            </otherwise>
        </choose>

    </select>

    <select id="getLastFeedDataVersion" resultType="java.lang.Long">
        SELECT max(version)
        FROM feed_data
        WHERE event_id = #{eventId}
            AND feed_id = #{feedId}
    </select>

    <resultMap id="feedDtoMap" type="io.kontur.eventapi.entity.Feed">
        <result property="feedId" column="feed_id" />
        <result property="description" column="description"/>
        <result property="alias" column="alias"/>
        <result property="providers" column="providers" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="roles" column="roles" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
    </resultMap>

    <resultMap id="feedDataDtoMap" type="io.kontur.eventapi.entity.FeedData">
        <result property="eventId" column="event_id" />
        <result property="feedId" column="feed_id" />
        <result property="version" column="version" />
        <result property="name" column="name" />
        <result property="description" column="description" />
        <result property="startedAt" column="started_at" />
        <result property="endedAt" column="ended_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="observations" column="observations" typeHandler="io.kontur.eventapi.typehandler.UUIDArrayTypeHandler" />
        <result property="episodes" column="episodes" typeHandler="io.kontur.eventapi.typehandler.FeedEpisodeTypeHandler"/>
    </resultMap>
</mapper>