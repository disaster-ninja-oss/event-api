<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.DataLakeMapper">

    <insert id="create" useGeneratedKeys="false">
        INSERT INTO data_lake (observation_id, external_id, updated_at, loaded_at, provider, data)
        VALUES (#{observationId}, #{externalId}, #{updatedAt}, #{loadedAt}, #{provider}, #{data})
    </insert>

    <select id="getLatestUpdatedEventForProvider" resultType="io.kontur.eventapi.entity.DataLake">
        SELECT observation_id as observationId, external_id as externalId, updated_at as updatedAt, loaded_at as loadedAt, provider, data
        FROM data_lake
        WHERE provider = #{provider}
        ORDER BY updated_at DESC
        LIMIT 1
    </select>

    <select id="getPdcHpSrvHazardsWithoutAreas" resultMap="dataLakeMap">
        SELECT distinct on (e1.external_id) *
        FROM data_lake e1
        WHERE e1.provider = 'hpSrvSearch'
          AND NOT EXISTS(
                select * from data_lake e2 where e1.external_id = e2.external_id and e2.provider = 'hpSrvMag'
              )
    </select>

    <select id="getDenormalizedEvents" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake e
        WHERE NOT EXISTS(
                select * from normalized_observations nr where e.observation_id = nr.observation_id
            )
          AND e.provider != 'gdacs_alert_geometry'
        ORDER BY loaded_at

    </select>

    <select id="getDataLakesByExternalId" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake
        WHERE external_id = #{externalId}
    </select>

    <select id="getDataLakeByObservationId" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake
        WHERE observation_id = #{observationId}
    </select>

    <select id="getDataLakeByExternalIdAndUpdateDate" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake
        WHERE external_id = #{externalId}
          AND updated_at = #{updatedAt}
    </select>

    <select id="getDataLakeWithGeometryForGdacs" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake
        WHERE external_id = #{externalId}
          AND provider = 'gdacs_alert_geometry'
    </select>

    <resultMap id="dataLakeMap" type="io.kontur.eventapi.entity.DataLake">
        <result property="observationId" column="observation_id" />
        <result property="externalId" column="external_id" />
        <result property="updatedAt" column="updated_at" />
        <result property="loadedAt" column="loaded_at" />
        <result property="provider" column="provider" />
        <result property="data" column="data" />
    </resultMap>

</mapper>