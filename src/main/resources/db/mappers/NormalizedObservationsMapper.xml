<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.NormalizedObservationsMapper">
    <insert id="insert">
        INSERT INTO normalized_observations (
            observation_id,
            provider,
            external_event_id,
            external_episode_id,
            <if test='point != null'>
                point,
            </if>
            <if test='geometries != null'>
                geometries,
            </if>
            event_severity,
            name,
            proper_name,
            description,
            episode_description,
            type,
            active,
            cost,
            region,
            loaded_at,
            started_at,
            ended_at,
            source_updated_at,
            source_uri,
            recombined
        ) VALUES (
            #{observationId},
            #{provider},
            #{externalEventId},
            #{externalEpisodeId},
            <if test='point != null'>
                'SRID=4326;${point}'::geometry,
            </if>
            <if test='geometries != null'>
                #{geometries}::jsonb,
            </if>
            #{eventSeverity},
            #{name},
            #{properName},
            #{description},
            #{episodeDescription},
            #{type},
            #{active},
            #{cost},
            #{region},
            #{loadedAt},
            #{startedAt},
            #{endedAt},
            #{sourceUpdatedAt},
            #{sourceUri},
            #{recombined}
        )
    </insert>

    <insert id="markAsRecombined">
        UPDATE normalized_observations SET recombined = 'true' WHERE observation_id = #{observationId}
    </insert>

    <select id="getObservationsNotLinkedToEvent" resultMap="normalizedObservationsDtoMap">
        SELECT *
        FROM normalized_observations
        WHERE recombined is false
        <foreach item="provider" collection="providers" separator="," open="and provider in (" close=")">
            #{provider}
        </foreach>
        ORDER BY loaded_at
        LIMIT 30000
    </select>

    <select id="getObservationsNotLinkedToEventFor24Hours" resultMap="normalizedObservationsDtoMap">
        WITH obs AS (
            SELECT min(source_updated_at) as min_sua
            FROM normalized_observations
            WHERE recombined IS FALSE
                <foreach item="provider" collection="providers" separator="," open="and provider in (" close=")">
                    #{provider}
                </foreach>
        )
        SELECT * FROM normalized_observations
        WHERE recombined IS FALSE
            <foreach item="provider" collection="providers" separator="," open="and provider in (" close=")">
                #{provider}
            </foreach>
            and source_updated_at between (select min_sua from obs) - interval '1s' and (select min_sua from obs) + interval '24 hours'
        ORDER BY source_updated_at
        LIMIT 30000
    </select>

    <select id="clusterObservationsByGeography" resultType="java.util.Set">
        select array_agg(observation_id)::uuid[] from (
            SELECT
                ST_ClusterDBSCAN(ST_Transform(collected_geography::geometry, 54032), 2000, 1) over() as cid,
                observation_id
            FROM normalized_observations
            <foreach item="observationId" collection="observationIds" separator="," open="WHERE observation_id in (" close=")">
                  #{observationId}
            </foreach>
        ) as clusters
        group by cid
    </select>

    <select id="getObservationsByEventId" resultMap="normalizedObservationsDtoMap">
        SELECT *
        FROM normalized_observations
        WHERE observation_id IN (SELECT observation_id FROM kontur_events WHERE event_id = #{eventId});
    </select>

    <select id="getObservations" resultMap="normalizedObservationsDtoMap">
        SELECT *
        FROM normalized_observations
        <foreach item="obsId" collection="observationIds" separator="," open="where observation_id in (" close=")">
            #{obsId}
        </foreach>
    </select>

    <select id="getDuplicateObservation" resultMap="normalizedObservationsDtoMap">
        SELECT *
        FROM normalized_observations
        WHERE external_episode_id = #{externalEpisodeId}
          AND loaded_at &lt;= #{loadedAt}
          AND observation_id != #{observationId}
          AND provider = #{provider}
        ORDER BY loaded_at DESC
        LIMIT 1
    </select>

    <select id="getNormalizedObservationByExternalEpisodeIdAndProvider" resultMap="normalizedObservationsDtoMap">
        SELECT *
        FROM normalized_observations
        WHERE external_episode_id = #{externalEpisodeId}
          AND provider = #{provider}
    </select>

    <select id="getTimestampAtTimezone" resultType="java.time.OffsetDateTime">
        SELECT #{timestamp}::TIMESTAMP AT TIME ZONE #{timezone};
    </select>

    <select id="getNotRecombinedObservationsCount" resultType="java.lang.Integer">
        select count(*) from normalized_observations where not recombined;
    </select>

    <resultMap id="normalizedObservationsDtoMap" type="io.kontur.eventapi.entity.NormalizedObservation">
        <result property="observationId" column="observation_id"/>
        <result property="externalEventId" column="external_event_id"/>
        <result property="externalEpisodeId" column="external_episode_id"/>
        <result property="provider" column="provider"/>
        <result property="point" column="point"/>
        <result property="geometries" column="geometries" typeHandler="io.kontur.eventapi.typehandler.FeatureCollectionTypeHandler"/>
        <result property="eventSeverity" column="event_severity"/>
        <result property="name" column="name"/>
        <result property="properName" column="proper_name"/>
        <result property="description" column="description"/>
        <result property="episodeDescription" column="episode_description"/>
        <result property="type" column="type"/>
        <result property="active" column="active"/>
        <result property="cost" column="cost"/>
        <result property="region" column="region"/>
        <result property="loadedAt" column="loaded_at"/>
        <result property="startedAt" column="started_at"/>
        <result property="endedAt" column="ended_at"/>
        <result property="sourceUpdatedAt" column="source_updated_at"/>
        <result property="sourceUri" column="source_uri"/>
        <result property="recombined" column="recombined"/>
        <result property="normalizedAt" column="normalized_at"/>
    </resultMap>
</mapper>