<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.NormalizedObservationsMapper">
    <insert id="insert">
        INSERT INTO normalized_observations (
            observation_id,
            provider,
            external_event_id,
            external_episode_id,
            <if test='point != null'>
                point,
            </if>
            <if test='geometries != null'>
                geometries,
            </if>
            event_severity,
            name,
            description,
            episode_description,
            type,
            active,
            cost,
            region,
            loaded_at,
            started_at,
            ended_at,
            source_updated_at,
            source_uri
        ) VALUES (
            #{observationId},
            #{provider},
            #{externalEventId},
            #{externalEpisodeId},
            <if test='point != null'>
                'SRID=4326;${point}'::geometry,
            </if>
            <if test='geometries != null'>
                #{geometries}::jsonb,
            </if>
            #{eventSeverity},
            #{name},
            #{description},
            #{episodeDescription},
            #{type},
            #{active},
            #{cost},
            #{region},
            #{loadedAt},
            #{startedAt},
            #{endedAt},
            #{sourceUpdatedAt},
            #{sourceUri}
        )
    </insert>

    <select id="getExternalIdsToUpdate" resultType="String">
        SELECT DISTINCT (external_event_id)
        FROM normalized_observations no
        WHERE NOT exists(SELECT 1 FROM kontur_events ke WHERE ke.observation_id = no.observation_id)
    </select>

    <select id="getNotCombinedObservationsByExternalId" resultMap="normalizedObservationsDtoMap">
        SELECT *
        FROM normalized_observations no
        WHERE NOT exists(
                SELECT distinct (ke.observation_id) FROM kontur_events ke
                WHERE no.observation_id = ke.observation_id)
          AND no.external_event_id = #{externalEventId}
        ORDER BY no.loaded_at
    </select>

    <select id="getObservations" resultMap="normalizedObservationsDtoMap">
        SELECT *
        FROM normalized_observations
        <foreach item="obsId" collection="observationIds" separator="," open="where observation_id in (" close=")">
            #{obsId}
        </foreach>
    </select>

    <select id="getDuplicateObservation" resultMap="normalizedObservationsDtoMap">
        SELECT *
        FROM normalized_observations no
        WHERE no.external_episode_id = #{externalEpisodeId}
          AND DATE_TRUNC('second', no.source_updated_at) = #{sourceUpdatedAt}
          AND observation_id != #{observationId}
        ORDER BY loaded_at desc
        LIMIT 1
    </select>

    <resultMap id="normalizedObservationsDtoMap" type="io.kontur.eventapi.entity.NormalizedObservation">
        <result property="observationId" column="observation_id"/>
        <result property="externalEventId" column="external_event_id"/>
        <result property="externalEpisodeId" column="external_episode_id"/>
        <result property="provider" column="provider"/>
        <result property="point" column="point"/>
        <result property="geometries" column="geometries"/>
        <result property="eventSeverity" column="event_severity"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="episodeDescription" column="episode_description"/>
        <result property="type" column="type"/>
        <result property="active" column="active"/>
        <result property="cost" column="cost"/>
        <result property="region" column="region"/>
        <result property="loadedAt" column="loaded_at"/>
        <result property="startedAt" column="started_at"/>
        <result property="endedAt" column="ended_at"/>
        <result property="sourceUpdatedAt" column="source_updated_at"/>
        <result property="sourceUri" column="source_uri"/>
    </resultMap>
</mapper>