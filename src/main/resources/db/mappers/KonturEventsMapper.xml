<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.KonturEventsMapper">

    <insert id="insert" useGeneratedKeys="false">
        INSERT INTO kontur_events (event_id, provider, observation_id)
        VALUES (#{eventId}, #{provider}, #{observationId})
    </insert>

    <select id="getEventByExternalId" resultMap="konturEventDtoMap" >
        SELECT event_id, array_agg(observation_id)::uuid[] AS observation_ids
        FROM kontur_events
        WHERE observation_id IN (
            SELECT observation_id
            FROM normalized_observations
            WHERE external_event_id = #{externalId}
            )
        GROUP BY event_id
    </select>

    <select id="getEventById" resultMap="konturEventDtoMap" >
        SELECT event_id, array_agg(observation_id)::uuid[] AS observation_ids
        FROM kontur_events
        WHERE event_id = #{eventId}
        GROUP BY event_id
    </select>

    <select id="getEventWithClosestObservation" resultMap="konturEventDtoMap" >
        SELECT ev.*
        FROM kontur_events ev inner join normalized_observations no on ev.observation_id = no.observation_id
        WHERE
            no.source_updated_at between #{updatedAt} - interval '24 hours' and #{updatedAt} + interval '24 hours'
            AND ST_DWithin(ST_GeomFromGeoJSON(#{geometry})::geography, no.collected_geography, 1000)
            <foreach item="provider" collection="providers" separator="," open="AND no.provider in (" close=")">
             #{provider}
            </foreach>
        ORDER BY ST_Distance(ST_GeomFromGeoJSON(#{geometry})::geography, no.collected_geography)
        LIMIT 1
    </select>

    <select id="getEventsForRolloutEpisodes" resultType="java.util.UUID">
        SELECT event_id
        FROM feed_event_status
        WHERE feed_id = #{feedId}
            AND actual is false
        LIMIT 10000;
    </select>

    <resultMap id="konturEventDtoMap" type="io.kontur.eventapi.entity.KonturEvent">
        <result property="eventId" column="event_id"/>
        <result property="observationIds" column="observation_ids" typeHandler="io.kontur.eventapi.typehandler.UUIDArrayTypeHandler"/>
    </resultMap>
</mapper>