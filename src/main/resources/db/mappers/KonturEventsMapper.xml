<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.KonturEventsMapper">

    <insert id="insert" useGeneratedKeys="false">
        INSERT INTO kontur_events (event_id, version, provider, observation_id)
        VALUES (#{eventId}, #{version},
                (select provider from data_lake where observation_id = #{observationId}),
                #{observationId})
    </insert>

    <select id="getLatestEventByExternalId" resultMap="konturEventDtoMap" >
        SELECT event_id, version, array_agg(observation_id) as observation_ids
        FROM kontur_events
        WHERE observation_id in (
            SELECT observation_id
            FROM normalized_observations
            WHERE external_event_id = #{externalId}
            )
        GROUP BY event_id, version
        ORDER BY version DESC
        LIMIT 1
    </select>

    <select id="getNewEventVersionsForFeed" resultMap="konturEventDtoMap">
        select ke.event_id, ke.version, array_agg(ke.observation_id) as observation_ids
        from kontur_events ke,
             feeds f
        where not exists(select 1
                         from feed_data fd
                         where fd.event_id = ke.event_id
                           and fd.version = ke.version)
          and ke.provider = ANY (f.providers)
          and f.feed_id = #{uuid}
        group by ke.event_id, ke.version
    </select>

    <resultMap id="konturEventDtoMap" type="io.kontur.eventapi.entity.KonturEvent">
        <result property="eventId" column="event_id"/>
        <result property="version" column="version"/>
        <result property="observationIds" column="observation_ids" typeHandler="io.kontur.eventapi.typehandler.UUIDArrayTypeHandler"/>
    </resultMap>
</mapper>